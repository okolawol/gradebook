#include "gradewindow.h"
#include "ui_gradewindow.h"
#include "mainwindow.h"
#include "criteriadialog.h"
#include "curvesdialog.h"
#include <QtDebug>

GradeWindow::GradeWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::GradeWindow)
{
    ui->setupUi(this);
    ui->commentsTextEdit->setText("comments");
    model = new QStringListModel(this);
}

GradeWindow::~GradeWindow()
{
    delete ui;
}

void GradeWindow::setCurrentClass(Class curClass){
    currentClass = curClass;

    QString className = QString::fromStdString(currentClass.getClassName());

    QString profName1 = QString::fromStdString(currentClass.getInstructor().getFirstName());
    QString profName2 = QString::fromStdString(currentClass.getInstructor().getLastName());

    ui->classLabel->setText(className+"\n"+"Instructor: "+profName1+" "+profName2);


    vector<Student> students = currentClass.getStudents();
    for(int i=0; i< (int)students.size(); i++){
        Student tempStudent = students.at(i);

        QString firstName = QString::fromStdString(tempStudent.getFirstName());
        QString lastName = QString::fromStdString(tempStudent.getLastName());

        ui->studentListWidget->addItem(firstName+" "+lastName);
    }
}

void GradeWindow::on_backButton_clicked()
{
    w = new MainWindow();
    w->show();
    this->close();
}

void GradeWindow::on_newCriteriaButton_clicked()
{
    CriteriaDialog c;
    c.currentClass = currentClass;
    c.setModal(true);
    c.exec();



}

void GradeWindow::on_curveButton_clicked()
{
    CurvesDialog c2;
    c2.setModal(true);
    c2.exec();
}

void GradeWindow::on_studentListWidget_itemClicked(QListWidgetItem *item)
{

    int selectedRow = ui->studentListWidget->currentRow();

    vector<Student> students = currentClass.getStudents();
    Student selectedStudent;
    for(int i=0 ; i< (int)students.size(); i++){
        if(i == selectedRow){
            selectedStudent = students.at(i);
            break;
        }
    }

    int studentID = atoi(selectedStudent.getID().c_str());
    updateGrades(studentID);
}
void GradeWindow::updateGrades(int studentID){

    Grade grade = currentClass.getGrade(studentID);
    activities = grade.getActivities();

    QStringList list;


    for(int i=0; i<(int)activities.size(); i++){
        Activity temp = activities.at(i);
        QString actName = QString::fromStdString(temp.getName());
        QString weight = QString::number(temp.getWeight());
        //qDebug()<<temp.getWeight();
        list.append(actName +"("+ weight+"%)");
    }
    model->setStringList(list);
    ui->activityListView->setModel(model);


}
void GradeWindow::formatList(){
    int listSize =  (int)ui->activityListView->contentsSize();
}


void GradeWindow::on_studentListWidget_currentItemChanged(QListWidgetItem *current, QListWidgetItem *previous)
{

    QFont font = current->font();
    font.setBold(true);
    font.setPointSize(20);
    current->setFont(font);

    if(previous!=NULL){
        font = previous->font();
        font.setBold(false);
        font.setPointSize(9);
        previous->setFont(font);
    }


}
